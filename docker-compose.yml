version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Porta AMQP
      - "15672:15672" # Management Console di RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017" # Porta MongoDB
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpass
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://admin:adminpass@localhost:27017 --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    ports:
      - "9091:9091"
    environment:
      RABBIT_HOST: rabbitmq
      RABBIT_QUEUE: summarize_queue
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
      MONGO_URI: mongodb://admin:adminpass@mongodb:27017

  consumersummarize:
    build:
      context: ./consumer-summarize
      dockerfile: Dockerfile
    container_name: consumersummarize
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      RABBIT_HOST: rabbitmq
      RABBIT_QUEUE: summarize_queue
      MONGO_URI: mongodb://admin:adminpass@mongodb:27017

  consumernlp:
    build:
      context: ./consumer-nlp
      dockerfile: Dockerfile
    container_name: consumernlp
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      RABBIT_HOST: rabbitmq
      RABBIT_QUEUE: nlp_queue
      MONGO_URI: mongodb://admin:adminpass@mongodb:27017

  consumerimagecontext:
    build:
      context: ./consumer-imagecontext
      dockerfile: Dockerfile
    container_name: consumerimagecontext
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      RABBIT_HOST: rabbitmq
      RABBIT_QUEUE: context_queue

  extract_text_service:
    build:
      context: ./extract_text_service
      dockerfile: Dockerfile
    container_name: extract_text_service
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "5001:5001"

  server_centrale_springboot:
    build:
      context: ./server_centrale_springboot
      dockerfile: Dockerfile
    container_name: server_centrale_springboot
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      # Spring Boot Config
      - SPRING_APPLICATION_NAME=servercentrale
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

      # MongoDB Config
      - SPRING_DATA_MONGODB_URI=mongodb://admin:adminpass@mongodb:27017/server_db?authSource=admin
      - SPRING_DATA_MONGODB_DATABASE=server_db

      # Configurazione API di estrazione testo
      - EXTRACT_TEXT_API=http://extract_text_service:5001/extract/text

      # Configurazione RabbitMQ
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=user
      - RABBITMQ_PASS=pass
      - RABBITMQ_QUEUE_NLP=nlp_queue
      - RABBITMQ_QUEUE_SUMMARIZE=summarize_queue
      - RABBITMQ_QUEUE_CONTEXT=context_queue
    ports:
      - "8080:8080"

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    depends_on:
      - server_centrale_springboot
    ports:
      - "443:443"

  auth_server:
    build:
      context: ./auth_server
      dockerfile: Dockerfile
    container_name: auth_server
    ports:
      - "5002:5002"

volumes:
  rabbitmq_data:
  mongo_data:
